- front: 'Binary Search'
  back: |
    def binary_search(arr, target):
        l, r = 0, len(arr) - 1
        
        while l <= r:
            m = l + (r - l) // 2
            
            if arr[m] > target:
                r = m - 1
            elif arr[m] < target:
                l = m + 1
            else:
                return m
        
        return -1
  description: |
    Time Complexity: O(log n)
    Space Complexity: O(1)
    Edge Cases:
      - Empty list: binary_search([], 3) should return -1.
      - Single element list: binary_search([5], 5) should return 0.
      - No match: binary_search([1, 2, 3], 4) should return -1.
    Paradigms:
      - Divide and Conquer

- front: 'Trie: Insert Word'
  back: |
    class TrieNode:
        def __init__(self):
            self.children = {}
            self.final_node = False

    class Trie:
        def __init__(self):
            self.root = TrieNode()

        def insert(self, word) -> None:
            node = self.root
            for letter in word:
                node = node.children.setdefault(letter, TrieNode())
            node.final_node = True
  description: |
    Time Complexity: 
      - insert: O(n), where n is the length of the word.
    Space Complexity: O(n) for a single word, where n is the word's length.
    Edge Cases:
      - Insert an empty string: trie.insert('') should work.
    Paradigms:
      - Tree-Based Search
      - Prefix Tree
      - Trie

- front: 'Trie: Search Word'
  back: |
    class TrieNode:
        def __init__(self):
            self.children = {}
            self.final_node = False

    class Trie:
        def __init__(self):
            self.root = TrieNode()

        def search(self, word) -> bool:
            node = self.root
            for letter in word:
                if letter not in node.children:
                    return False
                node = node.children[letter]
            return node.final_node
  description: |
    Time Complexity: 
      - search: O(n), where n is the length of the word.
    Space Complexity: O(n) for a single word, where n is the word's length.
    Edge Cases:
      - Search for a word that does not exist: trie.search('word') should return False.
    Paradigms:
      - Tree-Based Search
      - Prefix Tree
      - Trie

- front: 'Trie: Search Prefix'
  back: |
    class TrieNode:
        def __init__(self):
            self.children = {}
            self.final_node = False

    class Trie:
        def __init__(self):
            self.root = TrieNode()

        def search_prefix(self, prefix) -> bool:
            node = self.root
            for letter in prefix:
                if letter not in node.children:
                    return False
                node = node.children[letter]
            return True
  description: |
    Time Complexity: 
      - search_prefix: O(n), where n is the length of the prefix.
    Space Complexity: O(n) for a single word, where n is the word's length.
    Edge Cases:
    Paradigms:
      - Tree-Based Search
      - Prefix Tree
      - Trie

- front: 'Trie: Delete Word'
  back: |
    class TrieNode:
        def __init__(self):
            self.children = {}
            self.final_node = False

    class Trie:
        def __init__(self):
            self.root = TrieNode()

        def delete(self, word) -> None:
            def _delete(node, word, index) -> bool:
                if index == len(word):
                    if not node.final_node:
                        return False
                    node.final_node = False
                    return len(node.children) == 0  # If no children, delete.
                char = word[index]
                if char not in node.children:
                    return False
                can_delete_child = _delete(node.children[char], word, index + 1)
                if can_delete_child:
                    del node.children[char]
                    return len(node.children) == 0 and not node.final_node
                return False
            
            _delete(self.root, word, 0)
  description: |
    Time Complexity: 
      - delete: O(n), where n is the length of the word.
    Space Complexity: O(n) for a single word, where n is the word's length.
    Edge Cases:
    Paradigms:
      - Tree-Based Search
      - Prefix Tree
      - Trie

- front: 'Trie: Autocomplete'
  back: |
    class TrieNode:
        def __init__(self):
            self.children = {}
            self.final_node = False

    class Trie:
        def __init__(self):
            self.root = TrieNode()

        def autocomplete(self, prefix) -> list:
            node = self.root
            for letter in prefix:
                if letter not in node.children:
                    return []  # No words with this prefix
                node = node.children[letter]

            # Perform DFS to collect all words from this node onward
            def dfs(node, current_word):
                words = []
                if node.final_node:
                    words.append(current_word)
                for letter, child_node in node.children.items():
                    words.extend(dfs(child_node, current_word + letter))
                return words

            return dfs(node, prefix)
  description: |
    Time Complexity: 
      - autocomplete: O(m), where m is the number of words starting with the prefix.
    Space Complexity: O(n) for a single word, where n is the word's length.
    Edge Cases:
      - Autocomplete with no matches: trie.autocomplete('xyz') should return [].
    Paradigms:
      - Tree-Based Search
      - Prefix Tree
      - Trie

- front: 'Singly-Linked List: Insert at the head'
  back: |
    class ListNode:
        def __init__(self, val = 0, next = None):
            self.val = val
            self.next = next

    class SinglyLinkedList:

        def insert_at_head(self, head, val) -> ListNode:
            new_node = ListNode(val)
            if not head:
              return new_node
            new_node.next = head
            return new_node
  description: |
    Time Complexity:
      - insert_at_head: O(1), constant time.
    Space Complexity: O(1).
    Edge Cases:
    Paradigms:
      - Linear Data Structures
      - Pointer Manipulation
      - Linked List

- front: 'Singly-Linked List: Insert at the Tail'
  back: |
    class ListNode:
        def __init__(self, val = 0, next = None):
            self.val = val
            self.next = next

    class SinglyLinkedList:
        
        def insert_at_tail(self, head, val) -> ListNode:
            new_node = ListNode(val)
            if not head:
                return new_node
            ptr = head
            while ptr.next:
                ptr = ptr.next
            ptr.next = new_node
            return head

  description: |
    Time Complexity:
      - insert_at_tail: O(n), where n is the number of nodes.
    Space Complexity: O(1).
    Edge Cases:
    Paradigms:
      - Linear Data Structures
      - Pointer Manipulation
      - Linked List

- front: 'Singly-Linked List: Delete Node'
  back: |
    class ListNode:
        def __init__(self, val = 0, next = None):
            self.val = val
            self.next = next

    class SinglyLinkedList:

        def delete_node(self, head, val) -> ListNode:
            if head.val == val:
                return head.next
            ptr = head
            while ptr and ptr.next:
                if ptr.next.val == val:
                    ptr.next = ptr.next.next
                    break
                ptr = ptr.next
            return head

  description: |
    Time Complexity:
      - delete_node: O(n), where n is the number of nodes.
    Space Complexity: O(1).
    Edge Cases:
      - Deleting from an empty list: delete_node(None, 1) should return None.
    Paradigms:
      - Linear Data Structures
      - Pointer Manipulation
      - Linked List

- front: 'Singly-Linked List: Add at index'
  back: |
    class ListNode:
        def __init__(self, val = 0, next = None):
            self.val = val
            self.next = next

    class SinglyLinkedList:

        def add_at_index(self, head, index, val) -> ListNode:
            if index < 0:
                return head
            new_node = ListNode(val)
            if index == 0:
                new_node.next = head
                return new_node
            ptr = head
            for i in range(index - 1):
                if not ptr:
                    return head
                ptr = ptr.next
            if ptr:
                new_node.next = ptr.next
                ptr.next = new_node
            return head

  description: |
    Time Complexity:
      - add_at_index: O(n), where n is the number of nodes.
    Space Complexity: O(1).
    Edge Cases:
    Paradigms:
      - Linear Data Structures
      - Pointer Manipulation
      - Linked List

- front: 'Singly-Linked List: Delete at index'
  back: |
    class ListNode:
        def __init__(self, val = 0, next = None):
            self.val = val
            self.next = next

    class SinglyLinkedList:

        def delete_at_index(self, head, index) -> ListNode:
            if not head or index < 0:
              return head
            if index == 0:
                return head.next
            ptr = head
            for i in range(index - 1):
                if not ptr:
                    return head
                ptr = ptr.next
            if ptr and ptr.next:
                ptr.next = ptr.next.next
            return head

  description: |
    Time Complexity:
      - delete_at_index: O(n), where n is the number of nodes.
    Space Complexity: O(1).
    Edge Cases:
    Paradigms:
      - Linear Data Structures
      - Pointer Manipulation
      - Linked List

- front: 'Singly-Linked List: Merge sorted list'
  back: |
    class ListNode:
        def __init__(self, val = 0, next = None):
            self.val = val
            self.next = next

    class SinglyLinkedList:

        def merge_sorted_lists(self, l1, l2):
            dummy = ListNode()
            current = dummy
            while l1 and l2:
                if l1.val < l2.val:
                    current.next = l1
                    l1 = l1.next
                else:
                    current.next = l2
                    l2 = l2.next
                current = current.next
            current.next = l1 if l1 else l2
            return dummy.next

  description: |
    Time Complexity:
      - merge_sorted_lists: O(n + m), where n and m are the lengths of the two lists.
    Space Complexity: O(1) for all operations except reverse_list.
    Edge Cases:
      - Merging two empty lists: merge_sorted_lists(None, None) should return None.
    Paradigms:
      - Linear Data Structures
      - Pointer Manipulation
      - Linked List

- front: 'Singly-Linked List: Reverse List'
  back: |
    class ListNode:
        def __init__(self, val = 0, next = None):
            self.val = val
            self.next = next

    class SinglyLinkedList:

        def reverse_list(self, head) -> ListNode:
            l = None 
            m = head
            r = None

            while m:
                r = m.next
                m.next = l
                l = m
                m = r
            
            return l

  description: |
    Time Complexity:
      - reverse_list: O(n), where n is the number of nodes.
    Space Complexity: O(1).
    Edge Cases:
    Paradigms:
      - Linear Data Structures
      - Pointer Manipulation
      - Linked List

- front: 'Singly-Linked List: Detect cycle'
  back: |
    class ListNode:
        def __init__(self, val = 0, next = None):
            self.val = val
            self.next = next

    class SinglyLinkedList:

        def detect_cycle(self, head) -> bool:
            sptr = head  # Slow pointer
            fptr = head  # Fast pointer
            
            while fptr and fptr.next:
                sptr = sptr.next
                fptr = fptr.next.next
                if sptr == fptr:
                    return True
            return False

  description: |
    Time Complexity:
      - detect_cycle: O(n), where n is the number of nodes.
    Space Complexity: O(1).
    Edge Cases:
    Paradigms:
      - Linear Data Structures
      - Pointer Manipulation
      - Linked List

- front: 'Breadth First Search (Graph)'
  back: |
    from collections import deque

    def bfs(graph, start_vertex):
        visited = set()
        que = deque([start_vertex])

        while que:
            vertex = que.popleft()
            if vertex not in visited:
                print(vertex)
                visited.add(vertex)
                que.extend(graph.get(vertex, []))
  description: |
    Time Complexity: O(V + E), where V is the number of vertices and E is the number of edges.
    Space Complexity: O(V), space for visited nodes and the queue.
    Use Cases:
      - Find shortest path in unweighted graphs.
      - Find all reachable nodes from a source node.
    Edge Cases:
      - Empty graph: bfs_graph({}, 'A') should return nothing.
      - Graph with disconnected components: bfs_graph({'A': ['B'], 'B': ['A'], 'C': []}, 'A') should print A, B.
    Paradigms:
      - Graph Traversal
      - Queue-Based Search
      - FIFO

- front: 'Depth First Search: Iterative (Graph)'
  back: |
    def dfs(graph, start_vertex):
        visited = set()
        stack = [start_vertex]

        while stack:
            vertex = stack.pop()
            if vertex not in visited:
                print(vertex)
                visited.add(vertex)
                stack.extend(graph.get(vertex, []))
  description: |
    Time Complexity: O(V + E), where V is the number of vertices and E is the number of edges.
    Space Complexity: O(V), space for visited nodes and the stack.
    Use Cases:
      - Find connected components.
      - Traversal for exploring all nodes.
    Edge Cases:
      - Empty graph: dfs({}, 'A') should return nothing.
      - Graph with no edges: dfs({'A': []}, 'A') should only print A.
    Paradigms:
      - Graph Traversal
      - Stack-Based Search
      - LIFO

- front: 'Depth First Search: Recursive (Graph)'
  back: |
    def dfs(graph, start_vertex, visited = None):
        if visited is None:
            visited = set()
        visited.add(start_vertex)
        print(start_vertex)

        for neighbor in graph.get(start_vertex, []):
            if neighbor not in visited:
                dfs(graph, neighbor, visited)
  description: |
    Time Complexity: O(V + E), where V is the number of vertices and E is the number of edges.
    Space Complexity: O(V), due to the recursion stack.
    Use Cases: 
      - Explore all nodes in a graph recursively.
    Edge Cases:
      - Empty graph: dfs({}, 'A') should return nothing.
    Paradigms:
      - Graph traversal
      - Recursion

- front: 'Dijkstra’s Algorithm (Shortest Path)'
  back: |
    import heapq

    def dijkstra(graph, start_vertex):
        heap = [(0, start_vertex)]
        distances = {vertex: float('inf') for vertex in graph}
        distances[start_vertex] = 0

        while heap:
            curr_dist, vertex = heapq.heappop(heap)
            if curr_dist > distances[vertex]:
                continue
            for neighbor, weight in graph[vertex]:
                distance = curr_dist + weight
                if distance < distances[neighbor]:
                    distances[neighbor] = distance
                    heapq.heappush(heap, (distance, neighbor))

        return distances
  description: |
    Time Complexity: O((V + E) log V), due to heap operations.
    Space Complexity: O(V), space for storing distances.
    Use Cases:
      - Find the shortest path in weighted graphs.
    Edge Cases:
      - Graph with no path: dijkstra({'A': [('B', 1)], 'B': [('A', 1)]}, 'A') should return {'A': 0, 'B': 1}.
      - Graph with negative weights: doesn't work correctly for graphs with negative weights. Use Bellman-Ford instead.
    Paradigms:
      - Greedy Algorithm

- front: 'Kruskal’s Algorithm (Minimum Spanning Tree)'
  back: |
    class UnionFind:
        def __init__(self, size):
            self.parent = list(range(size))
            self.rank = [1] * size

        def find(self, node):
            if self.parent[node] != node:
                self.parent[node] = self.find(self.parent[node])
            return self.parent[node]

        def union(self, u, v):
            root1, root2 = self.find(u), self.find(v)
            if root1 != root2:
                if self.rank[root1] > self.rank[root2]:
                    self.parent[root2] = root1
                elif self.rank[root1] < self.rank[root2]:
                    self.parent[root1] = root2
                else:
                    self.parent[root2] = root1
                    self.rank[root1] += 1

    def kruskal(graph, num_nodes):
        edges = sorted(graph, key = lambda edge: edge[2])  # Sort by weight
        uf = UnionFind(num_nodes)
        mst = []

        for u, v, weight in edges:
            if uf.find(u) != uf.find(v):
                uf.union(u, v)
                mst.append((u, v, weight))

        return mst
  description: |
    Time Complexity: O(E log E), where E is the number of edges.
    Space Complexity: O(V), space for the Union-Find structure.
    Use Cases:
      - Finding Minimum Spanning Tree in a graph.
    Edge Cases:
      - Disconnected graph: kruskal([...], 5) will handle with appropriate edges.
    Paradigms:
      - Greedy Algorithm

- front: 'Heap Sort'
  back: |
    import heapq

    def heap_sort(arr):
        heapq.heapify(arr)
        return [heapq.heappop(arr) for _ in range(len(arr))]
  description: |
    Time Complexity: O(n log n), where n is the number of elements.
    Space Complexity: O(n), due to the heap structure.
    Edge Cases:
     - Empty list: heap_sort([]) should return [].
     - Already sorted list: heap_sort([1, 2, 3]) should return [1, 2, 3].
    Paradigms:
      - Heap-based Sorting
      - Selection-based Sorting

- front: 'Topological Sorting (Kahn’s Algorithm)'
  back: |
    from collections import deque

    def topological_sort(graph):
        in_degree = {vertex: 0 for vertex in graph}
        for vertex in graph:
            for neighbor in graph[vertex]:
                in_degree[neighbor] += 1

        que = deque([vertex for vertex in in_degree if in_degree[vertex] == 0])
        result = []

        while que:
            vertex = que.popleft()
            result.append(vertex)
            for neighbor in graph[vertex]:
                in_degree[neighbor] -= 1
                if in_degree[neighbor] == 0:
                    que.append(neighbor)

        return result if len(result) == len(graph) else []  # Return empty if cycle exists
  description: |
    Time Complexity: O(V + E), where V is the number of vertices and E is the number of edges.
    Space Complexity: O(V), space for storing in-degree and the queue.
    Edge Cases:
      - Graph with cycles: topological_sort({'A': ['B'], 'B': ['A']}) should return an empty list [].
      - Graph with no edges: topological_sort({'A': [], 'B': []}) should return ['A', 'B'].
    Paradigms:
      - Graph Traversal
      - FIFO

- front: 'Merge Sort'
  back: |
    def merge_sort(arr):
        if len(arr) <= 1:
            return arr
        mid = len(arr) // 2
        left = merge_sort(arr[:mid])
        right = merge_sort(arr[mid:])
        return sorted(left + right)
  description: |
    Time Complexity: O(n log n), where n is the number of elements.
    Space Complexity: O(n), due to the space for the sorted array.
    Edge Cases:
      - Empty list: merge_sort([]) should return [].
      - List with one element: merge_sort([1]) should return [1].
    Paradigms:
      - Divide and Conquer
      - Sorting

- front: 'Quicksort (Randomized)'
  back: |
    from random import randint

    def quicksort(arr):
        if len(arr) <= 1:
            return arr

        pivot = arr[randint(0, len(arr) - 1)]
        left = [x for x in arr if x < pivot]
        middle = [x for x in arr if x == pivot]
        right = [x for x in arr if x > pivot]
        return quicksort(left) + middle + quicksort(right)
  description: |
    Time Complexity: O(n log n) on average, O(n^2) in the worst case.
    Space Complexity: O(log n) due to recursion stack.
    Edge Cases:
      - Empty list: quicksort([]) should return [].
      - List with identical elements: quicksort([1, 1, 1]) should return [1, 1, 1].
    Paradigms:
      - Divide and Conquer
      - Randomization
      - Sorting

- front: 'Breadth First Traversal (Tree, Level Order)'
  back: |
    from collections import deque

    class TreeNode:
        def __init__(self, val):
            self.val = val
            self.left = None
            self.right = None

    def bfs(root):
        if not root:
            return
        que = deque([root])
        while que:
            node = que.popleft()
            print(node.val)
            if node.left:
                que.append(node.left)
            if node.right:
                que.append(node.right)
  description: |
    Time Complexity: O(n), where n is the number of nodes.
    Space Complexity: O(n), space for the queue.
    Edge Cases:
      - Empty tree: bfs_tree(None) should return nothing.
      - Tree with one node: bfs_tree(TreeNode(1)) should print 1.
    Paradigms:
      - Tree Traversal
      - Level Order Traversal
      - FIFO

- front: 'Depth First Traversal (Tree: Preorder, Inorder, Postorder)'
  back: |
    class TreeNode:
        def __init__(self, val):
            self.val = val
            self.left = None
            self.right = None

    def dfs_preorder(root):
        if root:
            print(root.val)
            dfs_preorder(root.left)
            dfs_preorder(root.right)

    def dfs_inorder(root):
        if root:
            dfs_inorder(root.left)
            print(root.val)
            dfs_inorder(root.right)

    def dfs_postorder(root):
        if root:
            dfs_postorder(root.left)
            dfs_postorder(root.right)
            print(root.val)
  description: |
    Time Complexity: O(n), where n is the number of nodes.
    Space Complexity: O(h), where h is the height of the tree (due to recursion stack).
    Edge Cases:
      - Empty tree: dfs_preorder(None), dfs_inorder(None), and dfs_postorder(None) should print nothing.
      - Tree with one node: dfs_preorder(TreeNode(1)), dfs_inorder(TreeNode(1)), and dfs_postorder(TreeNode(1)) should print 1.
    Paradigms:
      - Tree Traversal
      - Recursion

- front: 'Floyd-Warshall'
  back: |
    def floyd_warshall(graph):
        dist = {i: {j: float('inf') for j in graph} for i in graph}
        
        # Distance from a vertex to itself is 0
        for vertex in graph:
            dist[vertex][vertex] = 0
            
        for u in graph:
            for v, weight in graph[u].items():
                dist[u][v] = weight

        for k in graph:
            for i in graph:
                for j in graph:
                    if dist[i][j] > dist[i][k] + dist[k][j]:
                        dist[i][j] = dist[i][k] + dist[k][j]

        return dist
  description: |
    Time Complexity: O(V^3), where V is the number of vertices in the graph.
    Space Complexity: O(V^2), due to the 2D matrix for distances.
    Use Cases:
      - Find the shortest path between all pairs of vertices in a graph.
      - Can be used for detecting negative cycles.
    Edge Cases:
      - Graph with no edges: The result will show infinite distances between all non-connected pairs.
      - Graph with negative weights: The algorithm handles negative weights but not negative weight cycles.
    Paradigms:
      - Dynamic Programming

- front: 'Bellman-Ford'
  back: |
    def bellman_ford(graph, start_vertex):
        distances = {vertex: float('inf') for vertex in graph}
        distances[start_vertex] = 0

        for _ in range(len(graph) - 1):
            for u in graph:
                for v, weight in graph[u].items():
                    if distances[u] + weight < distances[v]:
                        distances[v] = distances[u] + weight

        # Detect negative cycles
        for u in graph:
            for v, weight in graph[u].items():
                if distances[u] + weight < distances[v]:
                    raise ValueError('Graph contains a negative weight cycle')

        return distances
  description: |
    Time Complexity: O(V * E), where V is the number of vertices and E is the number of edges.
    Space Complexity: O(V), for storing the distance of each vertex.
    Use Cases:
      - Find the shortest path from a single source to all vertices in a graph.
      - Can handle graphs with negative edge weights.
      - Detect negative weight cycles in a graph.
    Edge Cases:
      - Graph with no edges: The result will be distances as 'inf' for all vertices except the source.
      - Graph with negative weight cycles: Will raise an exception.
      - It is slower than Dijkstra’s and should be used specifically when negative edge weights are involved.
    Paradigms:
      - Dynamic Programming
